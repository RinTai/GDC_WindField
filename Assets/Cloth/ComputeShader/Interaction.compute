#pragma kernel Interaction
#pragma enable_d3d11_debug_symbols
struct Point
{
    float Mass;
    float3 Position;
    float3 Velocity;
    float padding;
};
sampler samplerWind;

RWTexture3D<float3> WindField;
float3 WindFieldCenter;
float3 WindFieldSize;

float VoxelSize;

float4x4 LocalToWorld;
float4x4 RotationWorldToLoacl;
int rawCount;
float deltaTime;
float meshVertexNums;
RWStructuredBuffer<Point> nowPoint; //代表现在的顶点的状态
RWStructuredBuffer<Point> postPoint; //代表上次的顶点的状态
RWStructuredBuffer<Point> prePoint; //初始状态

//矩阵转换
float4x4 inverse(float4x4 m)
{
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}
//id的转换 转换到StructuredBuffer下 一一对应吧.
int IdTransform(uint3 id)
{
    //把一个轴填满了才去下一个轴 Dispatch(totalnum / 256 .totalnum / 1024)
    return id.x + id.y * 1024 + id.z * 1024 * 1024 ;
}

float3 TrilinearSample(float3 id)
{
    uint x0 = (uint) id.x;
    uint y0 = (uint) id.y;
    uint z0 = (uint) id.z;
    
    uint x1 = x0 + 1;
    uint y1 = y0 + 1;
    uint z1 = z0 + 1;
    
    float xd = (id.x - x0) / 1;
    float yd = (id.y - y0) / 1;
    float zd = (id.z - z0) / 1;
    
    half3 V000 = WindField[uint3(x0, y0, z0)];
    half3 V100 = WindField[uint3(x1, y0, z0)];
    half3 V010 = WindField[uint3(x0, y1, z0)];
    half3 V001 = WindField[uint3(x0, y0, z1)];
    half3 V110 = WindField[uint3(x1, y1, z0)];
    half3 V101 = WindField[uint3(x1, y0, z1)];
    half3 V011 = WindField[uint3(x0, y1, z1)];
    half3 V111 = WindField[uint3(x1, y1, z1)];
 
    uint num = 0;
    float3 velocityWS = 0;
    uint3 temp = uint3(x0, y0, z0);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V000 * (1 - xd) * (1 - yd) * (1 - zd);
    }

    
    temp = uint3(x1, y0, z0);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V100 * xd * (1 - yd) * (1 - zd);
        num++;
    }

    
    temp = uint3(x0, y1, z0);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V010 * (1 - xd) * yd * (1 - zd);
        num++;
    }

    
    temp = uint3(x0, y0, z1);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V001 * (1 - xd) * (1 - yd) * zd;
        num++;
    }

    
    temp = uint3(x1, y1, z0);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V101 * xd * (1 - yd) * zd;
        num++;
    }

    temp = uint3(x1, y0, z1);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V011 * (1 - xd) * yd * zd;
        num++;
    }

    
    temp = uint3(x0, y1, z1);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V110 * xd * yd * (1 - zd);
        num++;
    }

    
    temp = uint3(x1, y1, z1);
    if (temp.x >= 0 && temp.x <= WindFieldSize.x && temp.y >= 0 && temp.y <= WindFieldSize.z && temp.z >= 0 && temp.z <= WindFieldSize.y)
    {
        velocityWS += V111 * xd * yd * zd;
        num++;
    }

    return velocityWS;
}

[numthreads(64, 1, 1)]
void Interaction(uint3 id : SV_DispatchThreadID)
{
       //在StructuredBuffer中的索引
    int index = IdTransform(id);
    
    if (index >= meshVertexNums||index < 0)
        return;
    
    float3 Gravity = float3(0, -9.8f, 0);
    
    float3 wVPos = mul(float4(nowPoint[index].Position, 1.0f), LocalToWorld).xyz;
    
    float3 windLocalPos = ((wVPos - WindFieldCenter) / VoxelSize + (WindFieldSize) / 2); //为了采样还需要除以 / WindFieldSize;
    //三线性采样
    float3 windForce = TrilinearSample(windLocalPos.xzy);
    
    float3 windForceToLocal = mul(float4(windForce * 10 + Gravity, 1.0f),RotationWorldToLoacl);
    
    //飞了？？ 3/18
    nowPoint[index].Velocity += deltaTime * windForceToLocal;
    //if (index <= 121&& index >= 64)
        //nowPoint[index].Velocity += deltaTime * float3(0, 10.0f, 0);
    
    nowPoint[rawCount - 1].Velocity = float3(0, 0, 0);
    nowPoint[0].Velocity = float3(0, 0, 0);
    
    postPoint[index].Position = nowPoint[index].Position;
      
    nowPoint[index].Position += nowPoint[index].Velocity * deltaTime;
    
    float3 pos = nowPoint[index].Position;
    
    nowPoint[index].Position = pos;
    
}
